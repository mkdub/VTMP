<?php

/* ==  WARNING! DO NOT EDIT THIS FILE! (PLEASE)  ==============================
*
*	  If you know what you're doing and would like to add your own custom
*     functions to this theme, DO NOT EDIT THIS FILE. Instead, use the
*     custom-functions.php file to define custom functions. Adding your
*     custom functions there will make it much easier to upgrade to a newer
*	  version of this theme without losing any of your customizations.
*
* ============================================================================*/


/* ==  Start Engine ==============================*/

require_once(TEMPLATEPATH . '/engine/engine.php');


/* ==  Thumbnails  ==============================*/

if ( function_exists( 'add_theme_support' ) ) {
	set_post_thumbnail_size( 60, 60, true ); // Normal post thumbnails
}


/* ==  Set Max Content Width  ==============================*/

if ( ! isset( $content_width ) ) $content_width = 642;


/* ==  Register Menus  ==============================*/

function dt_register_menu() {
	register_nav_menu('primary-menu', __('Primary Menu', 'engine'));
}

add_action('init', 'dt_register_menu');


/* ==  Fix WordPress Validation Erros  ==============================*/

function dt_add_nofollow_cat( $text ) {

    $valid_tag = 'rel="tag"';
    $text = str_replace('rel="category tag"', $valid_tag, $text);
    return $text;
}
add_filter( 'the_category', 'dt_add_nofollow_cat' );


/* ==  Specific Theme Enqueues  ==============================*/

function dt_specific_theme_js() {

	if(!is_admin()) {

		wp_register_script('modernizr', get_template_directory_uri() . '/js/modernizr.js', 'jquery');
		wp_enqueue_script('modernizr');


		wp_register_script('slidesjs', get_template_directory_uri() . '/js/slides.min.jquery.js', 'jquery');
		wp_enqueue_script('slidesjs');
		
		wp_register_script('fitvids', get_template_directory_uri() . '/js/jquery.fitvids.js', 'jquery');
		wp_enqueue_script('fitvids');
		
		wp_register_script('imagesLoaded', get_template_directory_uri() . '/js/jquery.imagesloaded.js', 'jquery');
		wp_enqueue_script('imagesLoaded');

		if(is_page_template('template-portfolio.php') || is_tax()) {
			wp_register_script('isotope', get_template_directory_uri() . '/js/jquery.isotope.min.js', 'jquery');
			wp_enqueue_script('isotope');
		}

		if(is_single() && get_post_type() == 'portfolio') {
			wp_register_script('roundabout', get_template_directory_uri() . '/js/jquery.roundabout.min.js', 'jquery');
			wp_enqueue_script('roundabout');
		}
		
		if(is_page_template('template-research.php') || is_tax()) {
			wp_register_script('isotope', get_template_directory_uri() . '/js/jquery.isotope.min.js', 'jquery');
			wp_enqueue_script('isotope');
		}

		if(is_single() && get_post_type() == 'research') {
			wp_register_script('roundabout', get_template_directory_uri() . '/js/jquery.roundabout.min.js', 'jquery');
			wp_enqueue_script('roundabout');
		}
		
		
		if(is_single()) {
			wp_register_script('fancybox', get_template_directory_uri() . '/js/fancybox/jquery.fancybox-1.3.4.pack.js', 'jquery');
			wp_enqueue_script('fancybox');
		}


	}

}

add_action('wp_print_scripts', 'dt_specific_theme_js');


/* ==  Style Enqueues  ==============================*/

function dt_theme_style_enqueues() {
       wp_register_style('fancybox', get_template_directory_uri() . '/js/fancybox/jquery.fancybox-1.3.4.css');
       wp_enqueue_style( 'fancybox');
}

add_action('wp_print_styles', 'dt_theme_style_enqueues');


/* ==  Sidebars  ==============================*/

if ( function_exists('register_sidebar') ) {

	register_sidebar( array (
		'name' => __('Homepage Widgets', 'engine'),
		'id' => 'home_page',
		'description' => __('Widget areas displayed below the slider on the homepage.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title"><span>',
		'after_title' => '</span></h3>',
	));

	register_sidebar(array(
		'name' => __('Global Sidebar', 'engine'),
		'id' => 'global_sidebar',
		'description' => __('Default sidebar widget area. Displayed on all page types (posts, pages, archives, etc).', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar(array(
		'name' => __('Blog Sidebar', 'engine'),
		'id' => 'blog_sidebar',
		'description' => __('Sidebar widget area only displayed on archives and single posts.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar(array(
		'name' => __('Page Sidebar', 'engine'),
		'id' => 'page_sidebar',
		'description' => __('Sidebar widget area only displayed on pages.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar( array (
		'name' => __('Footer Column 1 (wide)', 'engine'),
		'id' => 'footer_col1',
		'description' => __('Footer widget area spanning half the page width.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar( array (
		'name' => __('Footer Column 2', 'engine'),
		'id' => 'footer_col2',
		'description' => __('Footer widget area.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar( array (
		'name' => __('Footer Column 3', 'engine'),
		'id' => 'footer_col3',
		'description' => __('Footer widget area.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));

	register_sidebar( array (
		'name' => __('Footer Column 4', 'engine'),
		'id' => 'footer_col4',
		'description' => __('Footer widget area.', 'engine'),
		'before_widget' => '<div id="%1$s" class="widget %2$s widget-%2$s"><div class="widget-inside cf">',
		'after_widget' => '</div></div>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	));
}


/* ==  Custom Post Types  ==============================
*
*	   dt_register_post_type($name, $slug, $supports, $exclude_from_search)
*
*	   STRING 		required 	$name
*	   STRING 		required 	$slug
*	   ARRAY  		optional 	$supports
*	   BOOLEAN 		optional	$exclude_from_search
*
*	   If you decide to change the slug, remember to re-save your permalinks
*	   in Settings > Permalinks
*
* ============================================================================*/

$supports = array('title', 'editor', 'thumbnail', 'custom-fields', 'excerpt');

$labels = array(
	'name' => __('Insights','engine'),
	'singular_name' => __( 'Insights','engine' ),
	'add_new' => __('Add New','engine'),
	'add_new_item' => __('Add New Item','engine'),
	'edit_item' => __('Edit Item','engine'),
	'new_item' => __('New Item','engine'),
	'view_item' => __('View Item','engine'),
	'search_items' => __('Search Item','engine'),
	'not_found' =>  __('No Items Found','engine'),
	'not_found_in_trash' => __('No Items Found in Trash','engine'),
	'parent_item_colon' => ''
);

dt_register_post_type('portfolio', 'Insights', $supports, $labels);

$supports = array('title', 'editor', 'thumbnail', 'custom-fields', 'excerpt');

$labels = array(
	'name' => __('Masterplan','engine'),
	'singular_name' => __( 'Masterplan','engine' ),
	'add_new' => __('Add New','engine'),
	'add_new_item' => __('Add New Item','engine'),
	'edit_item' => __('Edit Item','engine'),
	'new_item' => __('New Item','engine'),
	'view_item' => __('View Item','engine'),
	'search_items' => __('Search Item','engine'),
	'not_found' =>  __('No Items Found','engine'),
	'not_found_in_trash' => __('No Items Found in Trash','engine'),
	'parent_item_colon' => ''
);

dt_register_post_type('research', 'Masterplan', $supports, $labels);


$labels = array(
	'name' => __('Testimonials','engine'),
	'singular_name' => __( 'Testimonial','engine' ),
	'add_new' => __('Add New','engine'),
	'add_new_item' => __('Add New Item','engine'),
	'edit_item' => __('Edit Item','engine'),
	'new_item' => __('New Item','engine'),
	'view_item' => __('View Item','engine'),
	'search_items' => __('Search Item','engine'),
	'not_found' =>  __('No Items Found','engine'),
	'not_found_in_trash' => __('No Items Found in Trash','engine'),
	'parent_item_colon' => ''
);

dt_register_post_type('testimonials', 'testimonials', array('title', 'editor', 'custom-fields'), $labels);

$labels = array(
	'name' => __('Slides','engine'),
	'singular_name' => __( 'Slide','engine' ),
	'add_new' => __('Add New','engine'),
	'add_new_item' => __('Add New Item','engine'),
	'edit_item' => __('Edit Item','engine'),
	'new_item' => __('New Item','engine'),
	'view_item' => __('View Item','engine'),
	'search_items' => __('Search Item','engine'),
	'not_found' =>  __('No Items Found','engine'),
	'not_found_in_trash' => __('No Items Found in Trash','engine'),
	'parent_item_colon' => ''
);

dt_register_post_type('slides', 'slides', array('title', 'editor', 'thumbnail', 'custom-fields'), $labels);


/* ==  Custom Taxonomies  ==============================
*
*	   dt_register_taxonomy($name, $slug, $posttype, $hierarchical)
*
*	   STRING 		required 	$name
*	   STRING 		required 	$slug
*	   STRING 		required 	$posttype
*	   ARRAY  		optional 	$hierarchical
*
*	   If you decide to change the slug, remember to re-save your permalinks
*	   in Settings > Permalinks
*
* ============================================================================*/

dt_register_taxonomy('Portfolio Groups', 'group', 'portfolio', true);

dt_register_taxonomy('Masterplan Groups', 'group2', 'research', true);

/* ==  Include Theme Specific Widgets  ==============================*/

require_once(TEMPLATEPATH . '/includes/widget-callout.php');
require_once(TEMPLATEPATH . '/includes/widget-testimonials.php');
require_once(TEMPLATEPATH . '/includes/widget-contentslider.php');
require_once(TEMPLATEPATH . '/includes/widget-infoboxes.php');


/* ==  Widgets  ==============================*/

$widgets = array(
	'better-search',
	'twitter-tweets',
	'enews',
	'flickr-photos'
);

register_widget( 'DT_Callout' );
register_widget( 'DT_Testimonials' );
register_widget( 'DT_Contentslider' );
register_widget( 'DT_Infoboxes' );

dt_include_widgets($widgets);


/* ==  Get related posts by taxonomy  ==============================*/

function dt_get_posts_related_by_taxonomy($post_id, $taxonomy, $notin, $args=array()) {
  $query = new WP_Query();
  $terms = wp_get_object_terms($post_id, $taxonomy);
  if (count($terms)) {
    // Assumes only one term for per post in this taxonomy
    $post_ids = get_objects_in_term($terms[0]->term_id,$taxonomy);
    $post = get_post($post_id);
    $args = wp_parse_args($args,array(
      'post_type' => $post->post_type, // The assumes the post types match
      //'post__in' => $post_ids,
	  'post__not_in' => array($notin),
      'taxonomy' => $taxonomy,
      'term' => $terms[0]->slug,
	  'posts_per_page' => get_option('dt_related_number')
    ));
    $query = new WP_Query($args);
  }
  return $query;
}


/* ==  Colour Scheme  ==============================*/

function dt_colour_css() {

	$colour = get_option('dt_colour');

	if($colour == '') {
		$colour = '#e55b00';
	}

	?>
	<style type="text/css">

	</style>
	<?php

}

add_action('wp_head', 'dt_colour_css');


/* ==  Sidebar Position  ==============================*/

add_filter('body_class','dt_sidber_position_class');

function dt_sidber_position_class($classes) {

	$position = get_option('dt_sidebar');

	if($position == __('Left', 'engine')) {

		$classes[] = 'sidebar-left';

	} elseif ($position == __('Right', 'engine')){

		$classes[] = 'sidebar-right';

	} elseif ($position == __('None', 'engine')){

		$classes[] = 'sidebar-none';

	} else {

		$classes[] = 'sidebar-right';
	}

	return $classes;

}


/* ==  Browser Classes  ==============================*/

add_filter('body_class','browser_body_class');
function browser_body_class($classes) {
    global $is_lynx, $is_gecko, $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome, $is_iphone;
    if($is_lynx) $classes[] = 'lynx';
    elseif($is_gecko) $classes[] = 'gecko';
    elseif($is_opera) $classes[] = 'opera';
    elseif($is_NS4) $classes[] = 'ns4';
    elseif($is_safari) $classes[] = 'safari';
    elseif($is_chrome) $classes[] = 'chrome';
    elseif($is_IE) $classes[] = 'ie';
    else $classes[] = 'unknown';
    if($is_iphone) $classes[] = 'iphone';
    return $classes;
}


/* ==  Skin Option  ==============================*/

add_filter('body_class','dt_skin_class');

function dt_skin_class($classes) {

	$skin = get_option('dt_skin');

	if($skin == __('Light', 'engine')) {

		$classes[] = 'light-skin';

	} elseif ($skin == __('Dark', 'engine')) {

		$classes[] = 'dark-skin';

	} else {

		$classes[] = '';
	}

	return $classes;

}


/* ==  Footer Code  ==============================*/

function dt_analytics(){
	$output = get_option('dt_google_analytics');
	if ( $output <> "" )
		echo stripslashes($output) . "\n";
}

add_action('wp_footer','dt_analytics');


/* ==  Comment Styling  ==============================*/

function dt_comment($comment, $args, $depth) {

    $isByAuthor = false;

    if($comment->comment_author_email == get_the_author_meta('email')) {
        $isByAuthor = true;
    }

    $GLOBALS['comment'] = $comment; ?>

    <li <?php comment_class(); ?> id="li-comment-<?php comment_ID() ?>">

     	<!--BEGIN #comment-id-->
		<div id="comment-<?php comment_ID(); ?>" class="clearfix">

			<?php echo get_avatar($comment,$size='60'); ?>

			<!--BEGIN .comment-meta-->
			<div class="comment-meta">

				<span class="comment-author"><?php echo get_comment_author_link(); ?></span>

				<span class="comment-time">
					<a href="<?php echo htmlspecialchars( get_comment_link( $comment->comment_ID ) ) ?>">
						(<?php echo human_time_diff( get_comment_time('U'), current_time('timestamp') ) . ' ' . __('ago', 'engine'); ?>)
					</a>
				</span>

				<span class="comment-reply"><?php comment_reply_link(array_merge( $args, array('depth' => $depth, 'max_depth' => $args['max_depth']))) ?></span>

			<!--END .comment-meta-->
			</div>

			<?php if ($comment->comment_approved == '0') : ?>
			<em class="moderation"><?php _e('Your comment is awaiting moderation.', 'engine'); ?></em>
			<?php endif; ?>

			<!--BEGIN .comment-body-->
			<div class="comment-body">
				<?php comment_text() ?>
			<!--END .comment-body-->
			</div>

		<!--END #comment-id-->
		</div>

<?php
}


/* ==  List categories for the groups  ==============================*/

class Group_Walker extends Walker_Category {
   function start_el(&$output, $category, $depth, $args) {
      extract($args);
      $cat_name = esc_attr( $category->name);
      $cat_name = apply_filters( 'list_cats', $cat_name, $category );
	  $link = '<a href="#" data-filter=".term-'.$category->term_id.'" ';
      if ( $use_desc_for_title == 0 || empty($category->description) )
         $link .= 'title="' . sprintf(__( 'View all items filed under %s', 'engine' ), $cat_name) . '"';
      else
         $link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';
      $link .= '>';
      // $link .= $cat_name . '</a>';
      $link .= $cat_name;
      if(!empty($category->description)) {
         //$link .= ' <span>'.$category->description.'</span>';
      }
      $link .= '<span class="arrow"></span></a>';
      if ( (! empty($feed_image)) || (! empty($feed)) ) {
         $link .= ' ';
         if ( empty($feed_image) )
            $link .= '(';
         $link .= '<a href="' . get_category_feed_link($category->term_id, $feed_type) . '"';
         if ( empty($feed) )
            $alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s', 'engine' ), $cat_name ) . '"';
         else {
            $title = ' title="' . $feed . '"';
            $alt = ' alt="' . $feed . '"';
            $name = $feed;
            $link .= $title;
         }
         $link .= '>';
         if ( empty($feed_image) )
            $link .= $name;
         else
            $link .= "<img src='$feed_image'$alt$title" . ' />';
         $link .= '</a>';
         if ( empty($feed_image) )
            $link .= ')';
      }
      if ( isset($show_count) && $show_count )
         $link .= ' (' . intval($category->count) . ')';
      if ( isset($show_date) && $show_date ) {
         $link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);
      }
      if ( isset($current_category) && $current_category )
         $_current_category = get_category( $current_category );
      if ( 'list' == $args['style'] ) {
          $output .= '<li class="segment-'.rand(2, 99).'"';
          $class = 'cat-item cat-item-'.$category->term_id;
          if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )
             $class .=  ' current-cat';
          elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )
             $class .=  ' current-cat-parent';
          $output .=  '';
          $output .= ">$link\n";
       } else {
          $output .= "\t$link<br />\n";
       }
   }
}



/* ==  Responsive Stuff  ==============================*/

function dt_addmeta()
{

	if(get_option('dt_responsive_mobile') == 'true') {
  		echo '<meta name="viewport" content="initial-scale=1; maximum-scale=1; user-scalable=no" />';
  		echo '<link rel="stylesheet" media="only screen and (max-width: 640px)" type="text/css" href="'.get_template_directory_uri().'/mobiles.css" />';
  	}
  	
  	if(get_option('dt_responsive_tablet') == 'true') {
  		echo '<link rel="stylesheet" media="only screen and (max-width: 980px) and (min-width: 641px)" type="text/css" href="'.get_template_directory_uri().'/tablets.css" />';
  	}

}

add_action('wp_head', 'dt_addmeta');



/* ==  Menu as Select  ==============================*/

function dt_get_page_selector($menu) {

  $page_menu_items = wp_get_nav_menu_items($menu);
  
  $selector = array();
  
  if (is_array($page_menu_items) && count($page_menu_items)>0) {
  
    $selector[] = '<select id="page-selector" name="page-selector" onchange="location.href = document.getElementById(\'page-selector\').value;">';
    
    $selector[] = '<option value="">'.__('Select a Page', 'engine').'</option>';
    
    foreach($page_menu_items as $page_menu_item) {
      $link = $page_menu_item->url;
      $selector[] = '<option value="'.$link.'">'.$page_menu_item->title.'</option>';
  }
    $selector[] = '</select>';
  }
  return implode("\n",$selector);
}
